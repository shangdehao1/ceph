========================================

ImageCache --> ImageWriteBack       
           --> FileImageCache    
           --> ReplicatedWriteLog


=========================================

ImageCache
    |
ImageWriteBack
  |
  --> FileImageCache
        |
        --> ReplicatedWriteLOg
              |
              --> FileImageCache 
                    |  
                    --> BlockGuard m_block_guard 
                    --> namespace::file
                         |
                         --> Policy --> StupidPolicy
                         --> MetaStore 
                         --> JournalStore
                         --> ImageStore 
                               |
                               --> AioFile (own)           --> namely, m_metastore
                               --> MetaStore (last layer)  --> namely, m_cache_file

====================== Gather ========================

typedef C_GatherBase<Context, Context> C_Gather;




================== aio write ========================

ImageRequest::send()
        |
        | (m_bypass_image_cache || m_image_ctx.image_cache == nullptr
        |
       / \
      /   \
     /     \
   true   false
    |       |
   (1)     (2)


(1)
    send_request()
        |
AbstractImageWriteRequest::send_request() 
        |
 Striper::file_to_extents
        |
AbstractImageWriteRequest::send_object_requests --> (1-2)
        |
 image_ctx.object_cacher != NULL --> if false, return.
        |
 send_object_cache_requests
        |
 ImageCtx.ObjectCache::discard_set(image_ctx.object_set, object_extents)


(1-2)
    ObjectRequestHandle* req = create_object_request()
    


(2)
    ImageWriteRequest::send_image_cache_request()
                        |
     image_ctx->image_cache->aio_write(0
                        |
        pure virtual: ImageCache::aio_write
                        |
        ->  ReplicatedWriteLog::aio_write --> (2-1)
        ->  FileImageCache::aio_write     --> (2-2)
        ->  ImageWriteBack::aio_write     --> (2-3)
            
(2-1):
    write_req = new C_WriteRequest(...)
    guarded_ctx = new GuardedRequestFunctionContext(..., write_req, ...)
    
    xx = GuardedRequest(guarded_ctx, ..)
    detain_guarded_request(xx)
    
    detain_guared_request_barrier_helper(req)
    
    detain_guarded_request_helper
    
    m_write_log_guard.detain, namely WriteLogGuard.detain()

    namely: BlockGuard<GuardedRequest>.detain()

    BlockGuard::detain()
    
    BlockGuard::block_ios.emplace_back(block_io)
    namely, list<BlockIO> block_ios; block_ios.push_back(block_io);

    
    
(2-2)
    
    req = new C_WriteBlockRequest<I>(....) 
    map_blocks(IO_TYPE_WRITE, ... , req)
                    |
                    | 1->n
                    |
        BlockGuard::BlockIOs block_ios; 
        m_block_guard.create_block_ios(..., block_ios, ...) 
                    |
            for(auto block_io : block_ios) 
                map_block(true, block_io)   --> ????
                    |
                m_policy->tick()
                    |
             block_request->activate()


============ rwl's request ======================================

Context
std::enable_shared_from_this<SharedPtrContext>
  |  
  --> SharedPtrContext
        |
        --> ExamplePtrContext
        |
        --> C_GuardedBlockIORequest
              |
              --> C_BlockIORequest
                    |
                    --> C_DiscardRequest
                    |
                    --> C_FlushRequest
                    |
                    --> C_WriteRequest
                          |
                          --> C_WriteSameRequest
                          |
                          --> C_CompAndWriteRequest


Context
  |
  --> C_ReadRequest


==================== rwl's operation =============================================

GenericLogOperation
  |
  --> SyncPointLogOperation
  |                       
  --> GenericWriteLogOperation
        |
        --> DiscardLogOperation
        |
        --> WriteLogOperation
              |
              --> WriteSameLogOperation


===================== rwl's log entry ================================================


GenericLogEntry  -----------------------------------------------> in-mem : WriteLogPmemEntry copy version.
  |                                                          |
  --> SyncPointLogEntry                                      ---> pmem   : one refference which point to persistent memory's WriteLogPmemEntry
  |
  --> GeneralWriteLogEntry
        |
        --> DiscardLogEntry
        |
        --> WriteLogEntry
             |
             --> WriteSameLogEntry
      


======================= rwl's Resource =======================================================

C_WriteRequest
  |
  --> WriteRequestResource
        |
        | vector
        |
        ---> WriteBufferAllocation  
                |
                -->unsigned int allocation_size = 0;
                |
                -->pobj_action buffer_alloc_action;
                |
                -->TOID(uint8_t) buffer_oid = OID_NULL;   <----- ###
                |
                -->bool allocated = false;
                |
                -->utime_t allocation_lat;

=========================================================================

SyncPoint
  |
  | M
  |
  --> SyncPointLogEntry



============================ write flow ========================================

                           ### TODO
                            |
      aio_write      flush_new_sync_point     aio_discard      aio_writesame   aio_compare_and_write
         |                |                        |                 |                 |
         | write_req      | flush_req              | discard_req     | ws_req          | cw_req
         |                |                        |                 |                 |
----------------------------------------------------------------------------------------------------------------                    
|                                                                                                              |
|              block_guarded_request                                                                           |
|                                                                                                              |
----------------------------------------------------------------------------------------------------------------
                        |
                        | C_BlockIORequest
                        |
     --------------------
     |
alloc_and_dispatch_io_req (xxx_req)
     |
rwl.m_deffered_ios.emppty()  ------------------------------>
   |                                    no                 |
   | yes                                                   |
   |                                              fails    |
   --> == C_BlockIORequest->alloc_resource() == ---------->|
           |                                               |
           | success                                       |
           |                                               |
           --> == C_BlockIORequest->dispatch ==            |
                            |                              ---> rwl.dispatch_deffered_write
                            | 
-------------------------------------------------------------------------------------------------
       |                          |                         |
  C_WriteRequest            C_FlushRequest          C_DiscardRequest        
       |                          |                         |
--------------------------------------------------------------------------------------------------
       |                              
       |                          
       | 
       |  
       |
 schedule_append
       |
 m_do_earler_flush -------------------
     |                               |
     | true                          | false
     |                               |
rwl::flush_pmem_buffer        rwl::shedule_flush_and_append
rwl::shedule_append                  |
     |                               |
----------------------------------------------------------- switch to rwl     
     |                               |

enlist_ops_append --> enqueue work queue --> xxx
op->appending 
     |
GeneralWriteLogOperation::appending  --> /* Called when the write log operation is appending and its log position is guaranteed */
     
xxx --> append_scheduled_ops  --> Performs the log event append operation for all of the scheduled events
    | 
alloc_op_log_entries(ops); --> yyy -->  Allocate the (already reserved) write log entries for a set of operations.
append_op_log_entries(ops); --> zzz -->  Write and persist the (already allocated) write log entries and
                                         data buffer allocations for a set of ops. The data buffer for each
                                         of these must already have been persisted to its reserved area.
complete_op_log_entries  --> New entries may be flushable. Completion will wake up flusher.  


zzz --> flush_op_log_entries  --> Flush the persistent write log entries set of ops. The entries must
                                  be contiguous in persistent memory.
             
  

===========================================================================

C_WriteRequest
  |
  --> 

====================== note ===============================

how to judge current all clean : 










How to flush all writes to OSD ?


        
        
flush(...)
  |
internal_flush(on_finish, ....)
  |
  --> invadate_block_extent --> b_g_r = new GuardRequest 
  |
  --> detain_guard_request(b_g_r)
  |
  --> FunctionContext -->  flush_dirty_entries ----------------->-------------->-----------------------
  |                                                                                                   |                                                  
  --> FunctionContext : --> invadate                                                                  |                                  
  |                           |                                                                       |                                  
  |                           --> ture                                                                |                          
  |                           |     |                                                                 |                                          
  |                           |     --> retire_entries                                                |                                  
  |                           |     |                                                                 |                                          
  |                           |     --> m_image_writeback->invalidate                                 |                                          
  |                           |                                                                       |                                                  
  |                           --> false                                                               | flush all writes to OSD                         
  |                                 |                                                                 |                          
  |                                 --> m_image_writeback->flush                                      |                                                  
  |                                                                                                   |                  
  |                                                                                                   |                                                                          
  --> FunctionContext --> release_guarded_request                                                     |                                  
  |                                                                                                   |                                          
  --> on_finish   <---- internal_flush's callback                                                     |                                                          
                                                                                                      |              
                                                                                                      |              
  ------------<-------------------------<--------------------------------------<-----------------------                                                                                                                
  |                                                                                                                                 
flush_dirty_entries
  |
  |
--------------------------------------------------------------     all clean
| m_log_dirty_entries.empty() ||  m_flush_ops_in_flight == 0 | -----------------> flush over
--------------------------------------------------------------
  |
  | dirty
  |
  --> m_flush_complete_contexts.push_back(flush_dirty_entries) 
  | 
  --> wakeup
        |
        --> m_work_queue.queue(process_work)
                                    |
   ----------------------------------
   |   
process_work
   |
   --> retire_entries              <--------- release log resources.
   |
   --> dispatch_deffered_writes    <------- if exist deferred write request, try to allocate resource, then dispatch it. 
   |
   --> process_writeback_dirty_entries
         |
         --> construct_flush_entry_ctx()
                |
                --> m_image_writeback->aio_write     --> cb : m_image_writeback->aio_flush --> cb : sync_point_write_flushed
                |
                --> m_image_writeback->aio_writesame --> cb : m_image_writeback->aio_flush --> cb : sync_point_write_flushed
                |
                --> m_image_writeback->aio_discard   --> cb : m_image_writeback->aio_flush --> cb : sync_point_write_flushed
                                                                                                                | 
                                                                                                                | 
   -------------------------------------------------------------------------------------------<------------------ 
   | 
   |
sync_point_write_flushed  <------------ all writes flushed for this sync point 
   |
handle_flushed_sync_point 
   |
   --> persist_last_flushed_sync_gen      <----------------update the last flushed sync point in the log
        | 
        -->  D_RW(pool_root)->flushed_sync_gen = m_flushed_sync_gen;




====================================================================================

 init 
  |
  --> m_image_writeback->init
  | 
  --> rwl_init
         |
  --------
  | 
rwl_init
  |
  --> no pool fille 
  |     |
  |     --> transactionly alloc persistent space.
  |
  --> pool file exist
  |     |
  |     --> reload metadata from pmem, then store these metadata to RWL. 
  |     |
  |     --> load_existing_entries
  |
  |
  --> init_flush_new_sync_point
           | 
           --> new_sync_point
           | 
           --> flush_new_sync_point



======================================

WriteRequestResources
  |
  --> WriteBufferAllocation
        |
        --> TOID(uint8_t) buffer_oid


















