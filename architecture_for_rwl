========================================

ImageCache --> ImageWriteBack       
           --> FileImageCache    
           --> ReplicatedWriteLog


=========================================

ImageCache
    |
ImageWriteBack
  |
  --> FileImageCache
        |
        --> ReplicatedWriteLOg


================== aio write ========================

ImageRequest::send()
        |
        | (m_bypass_image_cache || m_image_ctx.image_cache == nullptr
        |
       / \
      /   \
     /     \
   true   false
    |       |
   (1)     (2)


(1)
    send_request()
        |
AbstractImageWriteRequest::send_request() 
        |
 Striper::file_to_extents
        |
AbstractImageWriteRequest::send_object_requests --> (1-2)
        |
 image_ctx.object_cacher != NULL --> if false, return.
        |
 send_object_cache_requests
        |
 ImageCtx.ObjectCache::discard_set(image_ctx.object_set, object_extents)


(1-2)
    ObjectRequestHandle* req = create_object_request()
    


(2)
    ImageWriteRequest::send_image_cache_request()
                        |
     image_ctx->image_cache->aio_write(0
                        |
        pure virtual: ImageCache::aio_write
                        |
        ->  ReplicatedWriteLog::aio_write --> (2-1)
        ->  FileImageCache::aio_write     --> (2-2)
        ->  ImageWriteBack::aio_write     --> (2-3)
            
(2-1):
    write_req = new C_WriteRequest(...)
    guarded_ctx = new GuardedRequestFunctionContext(..., write_req, ...)
    
    xx = GuardedRequest(guarded_ctx, ..)
    detain_guarded_request(xx)
    
    detain_guared_request_barrier_helper(req)
    
    detain_guarded_request_helper
    
    m_write_log_guard.detain, namely WriteLogGuard.detain()

    namely: BlockGuard<GuardedRequest>.detain()

    BlockGuard::detain()
    
    BlockGuard::block_ios.emplace_back(block_io)
    namely, list<BlockIO> block_ios; block_ios.push_back(block_io);

    
    
(2-2)
    
    req = new C_WriteBlockRequest<I>(....) 
    map_blocks(IO_TYPE_WRITE, ... , req)
                    |
                    | 1->n
                    |
        BlockGuard::BlockIOs block_ios; 
        m_block_guard.create_block_ios(..., block_ios, ...) 
                    |
            for(auto block_io : block_ios) 
                map_block(true, block_io)   --> ????
                    |
                m_policy->tick()
                    |
             block_request->activate()

=============================================================================================
======================================== rwl's request ======================================
=============================================================================================

Context
  |
std::enable_shared_from_this<SharedPtrContext>
  |  
  --> SharedPtrContext
        |
        --> ExamplePtrContext
        |
        --> C_GuardedBlockIORequest
              |
              --> C_BlockIORequest
                    |
                    --> C_DiscardRequest
                    |
                    --> C_FlushRequest
                    |
                    --> C_WriteRequest
                          |
                          --> C_WriteSameRequest
                          |
                          --> C_CompAndWriteRequest


Context
  |
  --> C_ReadRequest


==================== rwl's operation  <-----> rwl's entry =============================================


GenericLogOperation ----------------> SyncPointLogOpeation
                    |                    |
                    |                    --> SyncPoint
                    |       
                    |       
                    | 
                    ----------------> GenericWriteLogOperation ---------------------> DiscardLogOperation
                                         |                     |                         |
                                         --> SyncPoint         |                         --> DiscardLogEntry log_entry
                                         |                     |
                                         --> on_write_append   |
                                         |                     |
                                         --> on_write_persist  |
                                                               |
                                                               |
                                                               |
                                                               -----------------------> WriteLogOperation  ----------------------------> WriteSameLogOperation
                                                                                          |
                                                                                          --> WriteLogEntry log_entry
                                                                                          |
                                                                                          --> bufferlist bl
                                                                                          |
                                                                                          --> WriteBufferAllocation buffer_alloc
                                                                       
                                                                       




GenericLogEntry ------------------------------------> SyncPointLogEntry 
  |                                  |                   |  
  --> WriteLogPmemEntry ram_entry    |                   --> uint32_t m_writes       
  |                                  |                   --> uint32_t m_bytes        
  --> WriteLogPmemEntry* pmem_entry  |                   --> uint32_t m_write_completed        
  |                                  |                   --> uint32_t m_write_flushed 
  --> int log_entry_index            |                   --> bool m_prior_sync_point_flush 
  |                                  |                   | 
  --> bool completed                 |                   --> SyncPointLogEntry* m_next_sync_point_entry 
                                     |                 
                                     |                 
                                     |                 
                                     |
                                     -------------> GeneralWriteLogEntry --------------------------------------------> DiscardLogEntry
                                                       |                                       |
                                                       ---> uint32_t referring_map_entries     |
                                                       ---> bool flushing                      |
                                                       ---> bool flushed                       |
                                                       |                                       ----------------------> WriteLogEntry ---------------------> WriteSameLogEntry
                                                       |                                                                 |                     
                                                       --> SyncPointLogEntry* sync_point_entry                           |                                                            
                                                                                                                         |                     
                                                                                                                         |                                
                                                                                                                         |                            
                                                                                                                         |                                 
                                                                                                                         |                                                            
                                                                                                                         --> buffer::ptr pmem_bp;
                                                                                                                         --> buffer::list pmem_bl;
                                                                                                                         --> std::atomic<int> bl_refs = {0}; 
                                                                                                                         --> uint8_t *pmem_buffer = nullptr;





======================= rwl's Resource =======================================================

C_WriteRequest
  |
  --> WriteRequestResource
        |
        | vector
        |
        ---> WriteBufferAllocation  
                |
                ---> unsigned int allocation_size = 0;
                |
                ---> pobj_action buffer_alloc_action; <----- publish
                |
                ---> TOID(uint8_t) buffer_oid = OID_NULL;   <----- ###
                |
                ---> bool allocated = false;
                |
                ---> utime_t allocation_lat;

=========================================================================

SyncPoint
  |
  |  
  --> std::shared_ptr<SyncPointLogEntry> log_entry; // ########
  |  
  --> std::shared_ptr<SyncPoint<T>> earlier_sync_point;
  --> std::shared_ptr<SyncPoint<T>> later_sync_point;
  |  
  --> uint64_t m_final_op_sequence_num = 0;
  |
  --> C_Gather *m_prior_log_entries_persisted;
  --> int m_prior_log_entries_persisted_result = 0;
  --> int m_prior_log_entries_persisted_complete = false;
  |
  --> C_Gather *m_sync_point_persist;
  --> bool m_append_scheduled = false;
  --> bool m_appending = false;
  |
  --> std::vector<Context*> m_on_sync_point_appending;
  --> std::vector<Context*> m_on_sync_point_persisted;


============================================================================================

WriteLogOperationSet 
  |
  --> BlockExtent m_extent;
  --> BlockGuardCell *m_cell;
  |
  --> Context *m_on_finish;
  --> bool m_persist_on_flush; 
  |
  --> C_Gather *m_extent_ops_appending;
  --> Context *m_on_ops_appending;
  |
  --> C_Gather *m_extent_ops_persist;
  --> Context *m_on_ops_persist;
  |
  --> GenericLogOperationsVector<T> operations;
  --> utime_t m_dispatch_time;
  |
  --> std::shared_ptr<SyncPoint<T>> sync_point;



======================= message break down ==================================================

                   bl                              bl1                                   copy
aio_write(bl) -------------> C_BlockIOReuqest ------------> GenericWriteLogOperation ------------> WriteLogEntry.pmem_buffer ---------> rwl.flush_pmem_buffer
                                               |   bl2                                   copy
                                               -----------> GenericWriteLogOperation ------------> WriteLogEntry.pmem_buffer ---------> rwl.flush_pmem_buffer
                                               |   bl3                                   copy
                                               -----------> GenericWriteLogOperation ------------> WriteLogEntry.pmem_buffer ---------> rwl.flush_pmem_buffer  
                                               |   bl4                                   copy
                                               -----------> GenericWriteLogOPeration ------------> WriteLogEntry.pmem_buffer ---------> rwl.flush_pmem_buffer




============================ write flow ========================================

                         ### TODO
                            |
      aio_write      flush_new_sync_point     aio_discard      aio_writesame   aio_compare_and_write
         |                |                        |                 |                 |
         | write_req      | flush_req              | discard_req     | ws_req          | cw_req
         |                |                        |                 |                 |
----------------------------------------------------------------------------------------------------------------                    
|                                                                                                              |
|                                      block_guarded_request                                                   |
|                                                                                                              |
----------------------------------------------------------------------------------------------------------------
                        |
                        v virtual : C_BlockIORequest
                        |
        -----------------
        |
== alloc_and_dispatch_io_req (xxx_req) ==
        |
        |
 m_deffered_ios.empty() ----------------------------------->
   |                                    no                 |
   v yes                                                   v 
   |                                              fails    |
   --> == C_BlockIORequest->alloc_resource() == ---------->|
           |                                               |
           v success                                       |
           |                                               |
           --> == C_BlockIORequest->dispatch ==            |
                            |                              ---> rwl.dispatch_deffered_write(xxx_req)
                            v 
                            | 
-------------------------------------------------------------------------------------------------
       |                          |                         |
  C_WriteRequest            C_FlushRequest          C_DiscardRequest        
       |                          |                         |
--------------------------------------------------------------------------------------------------
       |                          |                         |    
       v                        #####                       TODO
       |                              
--------------------------------------------------------------------------------------------------------------------- C_WriteRequest                                
       |                              
C_WriteRequest::dispatch
  |
  ---> set_complete = new C_OnFinisher(this, &rwl.m_on_persist_finisher);
  |
  ---> rwl.flush_new_sync_point(nullptr, on_exit); ------> TODO
  |
  ---> m_op_set = new WriteLogOperationSet(....)                     
  |
  ---> setup_log_operations()
  |      |
  |      --> for(auto &extent : m_image_extents) 
  |            | 
  v            -->  auto operation = std::make_shared<WriteLogOperation<T>>(*m_op_set, extent.first, extent.second);
  |            | 
  |            -->  m_op_set->operations.emplace_back(operation);
  |          
  |
  ---> for(auto gen_op = m_op_set.operations.begin(), auto allocation = m_resource.begin; ... ; ...) 
  |         |
  |         --> auto operation = gen_op->get_write_op();
  |         |
  |         --> operation->log_entry->ram_entry.has_data = 1;
  |         --> operation->log_entry->ram_entry.write_data = allocation->buffer_oid; // ##############
  |         --> operation->log_entry->ram_entry.sync_gen_number = rwl.m_current_sync_gen;
  |         --> operation->log_entry->ram_entry.sync_point = 0;
  |         --> operation->log_entry->ram_entry.discard = 0;
  |         |
  |         --> assert(!TOID_IS_NULL(operation->log_entry->ram_entry.write_data));
  |         --> operation->log_entry->pmem_buffer = D_RW(operation->log_entry->ram_entry.write_data); // ###########
  |         --> operation->buffer_alloc = &(*allocation);
  |         |             
  |         --> if (m_op_set->m_persist_on_flush)
  |         |       operation->log_entry->ram_entry.write_sequence_number = 0;
  |         --> else
  |         |      operation->log_entry->ram_entry.write_sequence_number = ++rwl.m_last_op_sequence_num;
  |         |      operation->log_entry->ram_entry.sequenced = 1;
  |         |
  |         --> operation->bl.substr_of(this->bl, buffer_offset, operation->log_entry->write_bytes()); // ##############
  |         --> buffer_offset += operation->log_entry->write_bytes();
  |         |
  |         |
  |         --> log_entries.emplace_back(operation->log_entry) ---------------->---------------------------------->--
  |                                                                                                                 |            
  |                                                                                                                 |            
  ---> m_op_set->m_extent_ops_appending->activate()                                                                 |                                                    
  |                                                                                                                 |                            
  ---> m_op_set->m_extent_ops_persist->activate()                                                                   |                                    
  |                                                                                                                 |                                                    
  |                                                                                                                 |             
  ---> for (auto &operation : m_op_set->operations)                                                                 |    
  |      |                                                                                                          |                                    
  |      --> auto write_op = operation->get_write_op();                                                             | insert to m_blocks_to_log_entries   
  |      |                                                                                                          |                                            
  |      --> bufferlist::iterator i(&write_op->bl);                                                                 |                    
  |      |                                                                                                          |            
  |      --> i.copy((unsigned)write_op->log_entry->write_bytes(), (char*)write_op->log_entry->pmem_buffer);         |            
  |                                                                                                                 |                                    
  |                                                                                                                 |    
  |                                                                                                                 |                                                    
  --------------> rwl.m_blocks_to_log_entries.add_log_entries(log_entries)     <-------------------------------------                               
  |          
  |          
  --> if (rwl.m_persist_on_flush_early_user_comp && m_op_set->m_persist_on_flush)
  |      |
  |      | yes
  |      |
  |      ----> this->complete_user_request(0);
  |              |
  |              --> C_BlockIORequest.complete_user_request
  |                     |
  |                     --> C_BlockIORequest.user_req->complete -------> aio_write's callback <-------
  |        
  |
  |
  |
  -------------> persist_on_write mode ----------
  |                                             |
  |                                             |
  |                                             --->  auto write_req_sp = this;
  |                                             --->  Context *schedule_append_ctx = new FunctionContext([this, write_req_sp](int r) {
  |                                             |        write_req_sp->schedule_append(); 
  |                                             |     });
  |                                             --->  m_op_set->sync_point->earlier_sync_point->m_on_sync_point_appending.push_back(schedule_append_ctx);
  |                                                                                                                                        |  
  |                                                                                                                                        |
  |                                                                                                                                 ------------------ thread swhitch 
  |                                                                                                                                        |
  |                                                                                                                                        |
  |                -------------------------<------------------------------------------------<----------------------------------------------                                                                                                                        
  |                |                                                                                                                                        
  |                |
  ---> C_WriteRequest->schedule_append   
         |                                     
         --> m_do_earler_flush -------------------------------------------
              |                                                          |
              | true                                                     | false
              |                                                          |
              --> rwl::flush_pmem_buffer(m_op_set.operations)            --> rwl::shedule_flush_and_append(m_op_set.operations)
              |       |                                                          
              |       ---> for (auto &operation : ops) {
              |       |       if (operation->is_write() || operation->is_writesame()) {
              |       |           auto write_entry = operation->get_write_log_entry();
              |       |           pmemobj_flush(m_internal->m_log_pool, write_entry->pmem_buffer, write_entry->write_bytes());
              |       |       }
              |       |     }
              |       | 
              |       ---> pmemobj_drain(m_internal->m_log_pool);
              |  
              |                                                          
              |                                                          
              --> rwl::shedule_append(m_op_set.operations)              
                          |                         
--------------------------|-------------------------------- switch to rwl     
                          |           
                          |           
       --------------------
       | 
       | 
rwl::shedule_append(m_op_set.operations)
   |
   | ops = m_op_set.operations
   |
   --> rwl.m_ops_to_append.splice(m_ops_to_append.end(), ops)
   |
   --> if need_finisher, so enlist_ops_append   ----> TODO
   |
   --> for(auto op : ops) 
        |
        --> op.appending()
                 | 
     -------------
     |
     | namely
     |
GenericLogOperation::appending
    |   
(1) --> SyncPointLogOperation::appending
    |     |
    |     --> for(auto ctx : sync_point.my_on_sync_point_appending) 
    |            |
    |            --> ctx->complete
    |     
    |     
    |     
    |     
    |     
    |     
    |     
    |
(2) --> GeneralWriteLogOperation::appending
          |
          --> GenericWriteLogOperation.on_write_append->complete(0)
                        | 
                        | namely  
                        | 
            WriteLogOperationsSet.m_extent_ops_appending->new_stub()->complete(0)  <------------ the last one of operation set
               |
               --> WriteLogOperationsSet.m_on_ops_appending.complete(0)
               |      |      
               |      | namely
               |      |      
               |      --> m_on_ops_appending = sync_point->m_prior_log_entries_persisted->new_sub()->complete();
               |
               --> WriteLogOperationsSet.m_extent_ops_persist
                     | 
                     --> WriteLogOperationSet.m_on_finish->complete(r);
                             |
                             | m_on_finish <--> new C_OnFinisher(C_WriteRequest, rwl.m_on_persist_finisher)
                             |
                             --> C_BlockIORequest->finish()              
                                    |
                                    --> complete_user_request
                                    |
                                    --> virtual finish_req = 0 
                                               |
                                C_WriteRequest::finish_req
                                    |
                                    --> rwl.release_writes_lanes
                                    |
                                    --> this->release_cell
                                    |
                                    --> update_req_stat
 


====================== note ===============================

         write IO path
               |                    
               |                    
               |                    
   C_writeRequest::dispatch      == aio_flush(on_finish) ==
               |                             |
               |                             --> flush_req = new C_FlushRequest(on_finish)
               |                             |
               v                             v
               |                 ---------------------------------------------------------- block_guard
               |                             |
               |                             v
               |                             |
               |                       == flush_new_sync_point_if_needed(flush_req, later) ==
               |                                          |
               |                                          v
               v                                          |
               |                         rwl.m_current_sync_point->log_entry->m_writes        
               |                             |                                  |                                                    
               |                             | yes                           no |            
               |                             |                                  |           
               |                             |                                  |                                     
               |                             |                                  |
               |                             |               m_current_sync_point->earlier_sync_point
               |                             |                    |                         |
               |                             |                    | no                  yes |
               |                             |                    |                         |
               |                             v          later.add(flush_req)        m_current_sync_point->earlier_sync_point->m_on_sync_point_persisted.push_back(flush_req)
               |                             |                    |                                                            |
               v                             |        user thread v                                                            v which thread
               |                             |                    |                                                            |
               |                             |                    ------>----------------------------------<--------------------
               |                             |                                            | 
               |                             |                                            | 
               |                             |                                 C_FlushRequest::complete
               |                             | 
               ----------------<------------- 
               |
               |
               |
               |
               v                           -----------------------> to_appending->m_prior_log_entries_persisted->activate()
               v                           |
               v                           -----------------------> to_appending->m_sync_point_persist->activate()
               |                           |
               |                           |
      == flush_new_sync_point(flush_req, later)  ==
           |  
           ---> create : flush_req = make_flush_req()  
           |  
           ---> create : new_sync_point(later)
           |  
           ---> old sync point : to_append = rwl.m_current_sync_point->earlier_sync_point  
           |  
           ---> link : flush_req->to_append = to_append 
           |
           ---> post : to_append->m_on_sync_pont_persisted.push_back(flush_req)
           |  
           ---> lambda entry : to_append->m_sync_point_persist->set_finisher
                                             |
                                             |
----------------------------------------------------------------------------- thread switch                
                                             |
                                             | namely
                                             |
                    == alloc_and_dispatch_io_req(flush_req) ==     
                                    |     |
           --------------------------     |
           |                              |  
           v                              --> == flush_req->alloc_resources ==
           |         
      == flush_req->dispatch ==  
           |    
           --> op = new SyncPointLogOperaion ==                            
           |
           --> == rwl.schedule_append(op) == 
                          |
           ----------------
           | 
    ** op->sync_pont->m_on_sync_point_appending ** 
           |   | 
           |   --> m_op_set->sync_point->earlier_sync_point->m_on_sync_point_appending.push_back()
           |   |       | 
           |   |       --> write_req->schedule_append
           |   |        
           |   --> old_sync_point->m_on_sync_point_appending.push_back()       
           |           | 
           |           --> new_sync_point->m_prior_log_entries_persisted->new_stub()
           v 
           |
    == enlist_op_appender == 
           |
    == append_scheduled_ops ==  
           | 
           ---> alloc_op_log_entries
           | 
           ---> append_op_log_entries
           | 
           ---> complete_op_log_entries 
                 |
                 ---> ** op->sync_point->m_on_sync_point_persisted ** 
                 |          |
                 |          ---> C_FlushRequest::complete
                 | 
                 | 
                 ---> == wakeup ==
                         |
                         --> process_work

===========================================================================================================================

== flush ==
    |
    |
== internal_flush(on_finish, ....) ==
        |
        ---> invadate_block_extent --> b_g_r = new GuardRequest 
        |
        ---> detain_guard_request(b_g_r)
        |
        ---> FunctionContext -->  flush_dirty_entries ---------------->-------------->-----------------------
        |                                                                                                   |                                                  
        ---> FunctionContext : --> invadate                                                                 |                                  
        |                           |                                                                       |                                  
        |                           --> ture                                                                |                          
        |                           |     |                                                                 |                                          
        |                           |     --> retire_entries                                                |                                  
        |                           |     |                                                                 |                                          
        |                           |     --> m_image_writeback->invalidate                                 |                                          
        |                           |                                                                       |                                                  
        |                           --> false                                                               | flush all writes to OSD                         
        |                                 |                                                                 |                          
        |                                 --> m_image_writeback->flush                                      |                                                  
        |                                                                                                   |                  
        |                                                                                                   |                                                                          
        --> FunctionContext --> release_guarded_request                                                     |                                  
        |                                                                                                   |                                          
        --> on_finish   <---- internal_flush's callback                                                     |                                                          
                                                                                                            |              
                                                                                                            |              
        ------------<-------------------------<--------------------------------------<-----------------------                                                                                                                
        |                                                                                                                                 
== flush_dirty_entries ==   <----------------<---------------------------------------------------------<-----------<---------------------------------          
        |                                                                                             |                                             |            
        v                                                                                             |                                             |                    
--------------------------------------------------------------       clean                            |                                             |    
| m_log_dirty_entries.empty() ||  m_flush_ops_in_flight == 0 | -----------------> flush over          |                                             ^    
--------------------------------------------------------------                                        |                                             |    
             |                                                                                        |                                             |    
             v dirty                                                                                  |                                             |    
             |                                                                                        |                                             |    
             --> m_flush_complete_contexts.push_back(flush_dirty_entries) ------------>----------------                                             |    
             |                                                                                                                                      |    
             --> == wakeup ==   <---------------------------------------------------------<---------------------------------------------------      |                                                                                                                                  
                   |                                                                                                                         |      |     
                   --> m_work_queue.queue(process_work)                                                                                      |      |     
                                               |                                                                                             |      |             
        ----------------------------------------                                                                                             |      |     
        |                                                                                                                                    |      |     
== process_work ==                                                                                                                           |      |     
   |                                                                                                                                         ^      ^             
   --> == retire_entries ==                                                                                                                  |      |     
   |        |                                                                                                                                |      |
   |        ---> can_retire_entry                                                                                                            |      |     
   |        |       |                                                                                                                        |      | 
   |        |       --> if current entry still don't be completed, it can't be retired                                                       |      |     
   |        |       |                                                                                                                        |      |     
   |        |       --> if current entry still don't be flushed, it can't be retired.                                                        |      | 
   |        |       |                                                                                                                        |      |     
   |        |       --> if current entry still be readed by other thread, it can't be retired.                                               |      | 
   |        |                                                                                                                                |      | 
   |        |                                                                                                                                |      |             
   |        ---> when current entry can be retired                                                                                           |      | 
   |                |                                                                                                                        |      |     
   |                ---> action 1 : just try modify  : D_RW(pool_root)->flushed_sync_point = m_flushed_sync_point                            |      | 
   |                |                                                                                                                        |      |     
   |                ---> action 2 : must need modify : D_RW(pool_root)->first_valid_entry = xxxxx                                            |      |
   |                |                                                                                                                        |      |     
   |                ---> action 3 : free AEP space   : TX_FREE(entry->ram_entry->write_data)                                                 |      |     
   |                                                                                                                                         |      | 
   |                                                                                                                                         |      |     
   |                                                                                                                                         |      |
   --> == dispatch_deffered_writes ==                                                                                                        |      |      
   |                                                                                                                                         |      |     
   --> == process_writeback_dirty_entries ==                                                                                                 |      |     
         |                                                                                                                                   |      |     
         ---> == can_flush_entry ==                                                                                                          |      |                                     
         |         |                                                                                                                         |      |     
         |         --> if m_invalidating is true, it can be flushed                                                                          |      |             
         |         |                                                                                                                         |      |     
         |         --> if current entry is completed and current in-flight flush is reasonable, it can be flushed.                           |      |     
         |                                                                                                                                   |      |                             
         v                                                                                                                                   |      |                     
         ---> == construct_flush_entry_ctx() ==                                                                                              |      |             
         |         |                                                                                                                         |      |                    
         v         ---> m_image_writeback->aio_write     ---> m_image_writeback->aio_flush --->  sync_point_write_flushed ---> wakeup --------      |                     
         |         |                                                                                                                         |      |                    
         |         ---> m_image_writeback->aio_writesame ---> m_image_writeback->aio_flush --->  sync_point_write_flushed ---> wakeup --------      |                    
         v         |                                                                                                                         |      |                     
         |         ---> m_image_writeback->aio_discard   ---> m_image_writeback->aio_flush --->  sync_point_write_flushed ---> wakeup --------      |                    
         |                                                                                                      |                                   |                    
         ---> == execute above context ====                                                                     |                                   |                            
         |                                                                                                      |                                   |                    
         |                                                                                                      |                                   |                            
         ---> == finish_contexts(rwl.m_flush_complete_contexts) ==                                              |                                   |                            
                    |                                                                                           v                                   |               
                    ---> flush_dirty_entries  ------------------------------------------------------------------------------------------------------- 
                                                                                                                | 
                                                                                                                | 
                                                                                                                | 
                                                                                                                | 
                                                                                                                v 
                                                                                                        == sync_point_write_flushed == 
                                                                                                                |
                                                                                                        == handle_flushed_sync_point ==  <---------
                                                                                                           |                                      | 
                                                                                                           |                                      | yes
                                                                                                           |                                      | 
                                                                                                           --> if_have_next_sync_point ------>-----
                                                                                                                     |                    
                                                                                                                     | no
                                                                                                                     v 
                                                                                                           == persist_last_flushed_sync_gen ==
                                                                                                                | 
                                                                                                                | transaction 
                                                                                                                | 
                                                                                                                -->  D_RW(pool_root)->flushed_sync_gen = m_flushed_sync_gen;
                                                                                                        



====================================================================================

 init 
  |
  --> m_image_writeback->init
  | 
  --> rwl_init
         |
  --------
  | 
rwl_init
  |
  --> no pool fille 
  |     |
  |     --> transactionly alloc persistent space.
  |
  --> pool file exist
  |     |
  |     --> reload metadata from pmem, then store these metadata to RWL. 
  |     |
  |     --> load_existing_entries
  |
  |
  --> init_flush_new_sync_point
           | 
           --> new_sync_point --> TODO
           | 
           --> flush_new_sync_point



======================================

WriteRequestResources
  |
  | vector
  |
  ----> WriteBufferAllocation
          |
          ----> TOID(uint8_t) buffer_oid
          |
          ----> bool allocated
          |
          ----> pobj_action buffer_alloc_action 
          |
          ----> unsigned int allocation_size

========================================================================

0 : reverser resource including log space and buffer space

1 : copy data from mem to AEP at one operation ---> dispatch function
2 : flush data buffer of AEP at one opearation ---> flush_pmem_buffer

3 : alloc log entry of AEP to every operation
4 : write log entry from mem to AEP 
5 : flush AEP for log entry

6 : modify pool root



 
  C_WriteRequest::schedule_append
              |
              v 
              |
         m_do_early_flush <---------determined by C_WriteRequest::dispatch
              |
              |             no
              ---------->------------------------
              |                                 |
              |                                 v 
              |                                 |
              v                     == schedule_flush_and_append ==
         yes  |                                 |
              |                                 -----> namely: put ops into rwl.m_ops_to_flush
              |                                 |
              |                                 v 
              |                         == enlist_op_flusher == <---------------
              |                                 |                              |
              |                                 |                              |
              |                            ------------- Finisher / WQ         |
              |                                 |                              |
              |                                 v                              |
              |                  == flush_then_append_scheduled_ops == -------->
              |                                 |       | 
              |                                 v       ------------------->--------------
              v                                 |                                        |       
              |<-----------------<---------------                                        v                       
              v                                                                          |       
              |                                                                          |       
              | get fixed number ops from m_ops_to_flush                                 |       
              v                                                                          |       
              |                                                                          |       
## 2 ### == flush_pmem_buffer(ops) == ####                                               |               
              |                                                                          |       
              v                                                                          |       
 == rwl.schedule_append(ops) ==                                                          |       
              |     |                                                                    |               
              |     ------->------------------                                           |               
            1 |                              | 2                                         |       
              v                              v                                           |       
              |                              |                                           |       
     == enlist_op_appender ==        == op->appending ==                                 |               
              |                           |                                              v               
              |                           --> finished op_set appending stub             |               
              |                                                                          |               
              |                                                                          |               
              | put ops to m_ops_to_append                                               v               
              |                                                                          v               
              |                                                                          v               
              v                                                                          |       
 ------------------------------------------------------------- thread switch             |               
              |                                                                          |       
              |                                                                          |       
    == append_scheduled_ops ==       <------------<---------------------------------------                                                                  
          |
          |
          --> ## 3 ## == alloc_op_log_entries == ####
          |                |
          |                ---> just get log resource, but don't move index of AEP
          |
          |
          --> == append_op_log_entries == 
          |         | 
          |         ---> ## 4 ## *operation->get_log_entry()->pmem_entry = operation->get_log_entry()->ram_entry ####
          |         | 
          |         ---> ## 5 ## == flush_op_log_entries == ######
          |         |               | 
          |         |               --> pmemobj_flush(m_internal->m_log_pool, ops.front()->get_log_entry()->pmem_entry, ops.size() * sizeof(*(ops.front()->get_log_entry()->pmem_entry)))
          |         |                
          |         ---> pmemobj_drain  
          |         |       
          |         ---> transaction        
          |               |
          |               --> ## 6 ##  D_RW(pool_root)->first_free_entry = rwl.m_first_free_entry ##
          |               |
          |               --> pmemobj_tx_publish(&write_op->buffer_alloc->buffer_alloc_action, 1)
          |
          |
          --> == complete_op_log_entries ==                                    
                        |                                      
                        v                                      
                        |                                      
              -----------                                      
              |                                     
              v                                      
  == GenericLogOperation->complete ==
        |
        v polymorphism
        |
        ---> SyncPointLogOperation::complete
        |        | 
        |        ---> SyncPointLogOperation::appending
        |        | 
        |        ---> rwl.handle_flushed_sync_point(sync_point->log_entry)
        v        | 
        |        ---> for( auto ctx : sync_point.m_on_sync_point_persisted ) 
        |                | 
        |                --> ctx->complete() 
        |               
        |               
        |               
        ---> GenericWriteLogOperation::complete
                |
                ---> GenericWriteLogOperation::appending
                |       |
                |       ---> construction : on_write_append = WriteLogOperationSet.m_extents_ops_appending->new_sub()
                |       |
                |       ---> on_write_append->complete() -----------------------------------------------------------------------
                |                                                                                                              |
                ---> xxxxxxxxxxxxxxxx                                                                                          |
                        |                                                                                                      |
                        ---> construction : on_write_persist = WriteLogOperationSet.m_extents_ops_persisit->new_sub()          |
                        |                                                                                                      |
                        ---> on_write_persist->complete()                                                                      |
                                 |                                                                                             |
                                 |                                                                                             |
                                 |                                                                                             |
                                 |                                                                                             |
                                 |                     -------------------------------------------------------------------------
                                 |                     |         
                                 v                     v         
                                 |                     |
                 ------------------------------------------------------- if the last stub is completed, execute its finisher entry.
                                 |                     |
                                 v                     v 
               ----------------------------------------------------------                    
               |                          |                             |
               | m_extent_ops_appending   |     m_extent_ops_persisted  | <----------- C_WriteRequest::m_op_set
               |                          |                             |
               ----------------------------------------------------------                       
                        |                              |
                        |                              -----------------------------------------
                        v                                                                      |
 complete stub of C_WriteRequest::SyncPoint::m_prior_log_entries_persisted                     v
                        |                                                                      |
                        v                                                                      |
 complete stub of C_WriteRequest::m_op_set::m_extent_ops_persisted  ---------->----------------|
                                                                                               |
                                                                                               v 
                                                                                               |
                                                                                    C_WriteRequest::complete 
                                                                                               |
                                                        









