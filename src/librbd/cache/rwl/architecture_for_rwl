
==============================================

if alloc_and_dispatch_io_req alloc fails, but dispatch_deferred_request success. latency ????

about rwl.m_lock, it is so frequently locked. can you consider to break down this big lock ???


how to explain io flow ?

how to explain rwl offer what guarantee ?

persist_on_flush mode


=====================================================
===================== review ========================
=====================================================


== data structure ==

 - rwl 

 - request 

 - operation 

 - log entry  

 - sync point

 - Extent 
     
 - BlockGuard

 - Resource

== io flow ==

                          init 
                           |
                           v
      ----------------------------------------------
      |                                            | 
      v                                            v
   aio_write                                    aio_flush
      |                                            | 
      v                                            v
  C_WriteRequest                             C_FlushRequest
      |                                            | 
      v                                            v
      ----------------------------------------------
                            |
                            v 
                       block guard
                            |
                            v
      ----------------------------------------------
      |                                            | 
      v                                            v
block_request_ctx                            block_request_ctx
      |                                            | 
      v                                            v
      ----------------------------------------------                     
                           |
                           v
                alloc_and_dispatch_io_req
                           |
                           v
      ----------------------------------------------
      |                                            |
 alloc resource                             alloc resource
      |                                            |
      v                                            |
  dispatch                                     dispatch
      |                                            |   
      v                                            |             
new_flush_sync_point                               |                     
      |                                            |                     
      v                                            |                     
 schedule_append                                   |                                     
      |                                            |             
      v                                            |                             
      ----------------------                       |                     
      |                    |                       |                     
      |                    v                       |                     
      |           schedule_flush_and_append        |                     
      |                    |                       |             
      |                    v                       |             
      |              enlist_flusher                |                     
      |                    |                       |             
      |                    v                       |                     
      |          flush_then_append_scheduled_ops   |             
      |                    |                       |                     
      |                    v                       |                     
      --------------> flush_pmem_buffer            |             
                           |                       |                    
                           v                       |                                     
                     schedule_append  <-------------
                           |
                           v
                      enlist_appender  
                           |
                           v
                     append_scheduled_ops
                           |
                           v
                    alloc_op_log_entries 
                           |
                           v
                    append_op_log_entries
                           |
                           v
                    complete_op_log_entries
                           |
                           v
      ----------------------------------------------
      |                                            | 
      v                                            v
  op->complete                                 op->complete
      |                                            |
      v                                            v
      ----------------------------------------------
                           |
                           v
                        wake_up
                           |
                           v
                      process_work
                           |
                           v
                     retire_entries
                           |
                           v
                dispatch_defferred_request
                           |
                           v
                    procee_dirty_enties
                           |
                           v
                       shut_down

========================================

ImageCache --> ImageWriteBack       
           --> FileImageCache    
           --> ReplicatedWriteLog


=========================================

  
       ImageRequest::send
                |
                v
    ----------------------------- 
    |                           |
    v                           |
ImageCache                      |
    |                           |
    v                           v 
ReplicatedWriteLog              |
    |                           |
    v                           v 
ImageWriteBack   -------->------| 
                                |
                                |
                                v
                                |
                              RADOS

================== aio write ========================

 ImageRequest::send
        |
        v (m_bypass_image_cache || m_image_ctx.image_cache == nullptr
        |
       / \
      /   \
     /     \
   true   false
    |       |
   (1)     (2)


(1)
    send_request()
        |
AbstractImageWriteRequest::send_request() 
        |
 Striper::file_to_extents
        |
AbstractImageWriteRequest::send_object_requests --> (1-2)
        |
 image_ctx.object_cacher != NULL --> if false, return.
        |
 send_object_cache_requests
        |
 ImageCtx.ObjectCache::discard_set(image_ctx.object_set, object_extents)


(1-2)
    ObjectRequestHandle* req = create_object_request()
    


(2)
    ImageWriteRequest::send_image_cache_request()
                        |
     image_ctx->image_cache->aio_write(0
                        |
        pure virtual: ImageCache::aio_write
                        |
        ->  ReplicatedWriteLog::aio_write --> (2-1)
        ->  FileImageCache::aio_write     --> (2-2)
        ->  ImageWriteBack::aio_write     --> (2-3)
            
(2-1):
    write_req = new C_WriteRequest(...)
    guarded_ctx = new GuardedRequestFunctionContext(..., write_req, ...)
    
    xx = GuardedRequest(guarded_ctx, ..)
    detain_guarded_request(xx)
    
    detain_guared_request_barrier_helper(req)
    
    detain_guarded_request_helper
    
    m_write_log_guard.detain, namely WriteLogGuard.detain()

    namely: BlockGuard<GuardedRequest>.detain()

    BlockGuard::detain()
    
    BlockGuard::block_ios.emplace_back(block_io)
    namely, list<BlockIO> block_ios; block_ios.push_back(block_io);

    
    
(2-2)
    
    req = new C_WriteBlockRequest<I>(....) 
    map_blocks(IO_TYPE_WRITE, ... , req)
                    |
                    | 1->n
                    |
        BlockGuard::BlockIOs block_ios; 
        m_block_guard.create_block_ios(..., block_ios, ...) 
                    |
            for(auto block_io : block_ios) 
                map_block(true, block_io)   --> ????
                    |
                m_policy->tick()
                    |
             block_request->activate()

=============================================================================================
======================================== rwl's request ======================================
=============================================================================================

Context
  |
std::enable_shared_from_this<SharedPtrContext>
  |  
  ---> SharedPtrContext
        |
        ---> ExamplePtrContext
        |
        ---> C_GuardedBlockIORequest
              |
              ---> C_BlockIORequest
                      |
                      ---> C_DiscardRequest
                      |
                      ---> C_FlushRequest
                      |
                      ---> C_WriteRequest
                            |
                            --> C_WriteSameRequest
                            |
                            --> C_CompAndWriteRequest


Context
  |
  --> C_ReadRequest



==================== rwl's operation  <--- 1 : 1 ---> rwl's entry =============================================

                          P <--> C
GenericLogOperation ----------------> SyncPointLogOpeation
                    |                    |
                    |                    --> SyncPoint
                    |       
                    |       
                    | 
                    |     P <--> C
                    ----------------> GenericWriteLogOperation ---------------------> DiscardLogOperation
                                         |                      |                         |
                                         ---> SyncPoint         |                         ---> DiscardLogEntry log_entry
                                         |                      |
                                         ---> on_write_append   |
                                         |                      |
                                         ---> on_write_persist  |
                                                                |
                                                                |
                                                                |
                                                                -----------------------> WriteLogOperation  ----------------------------> WriteSameLogOperation
                                                                                          |
                                                                                          ---> WriteLogEntry log_entry
                                                                                          |
                                                                                          ---> bufferlist bl
                                                                                          |
                                                                                          ---> WriteBufferAllocation buffer_alloc
                                                                       
                                                                       



GenericLogEntry ------------------------------------> SyncPointLogEntry 
  |                                  |                   |  
  --> WriteLogPmemEntry ram_entry    |                   --> uint32_t m_writes       
  |                                  |                   --> uint32_t m_bytes        
  --> WriteLogPmemEntry* pmem_entry  |                   --> uint32_t m_write_completed        
  |                                  |                   --> uint32_t m_write_flushed 
  --> int log_entry_index            |                   --> bool m_prior_sync_point_flush 
  |                                  |                   | 
  --> bool completed                 |                   --> SyncPointLogEntry* m_next_sync_point_entry 
                                     |                 
                                     |                 
                                     |                 
                                     |
                                     -------------> GeneralWriteLogEntry --------------------------------------------> DiscardLogEntry
                                                       |                                       |
                                                       ---> uint32_t referring_map_entries     |
                                                       ---> bool flushing                      |
                                                       ---> bool flushed                       |
                                                       |                                       ----------------------> WriteLogEntry ---------------------> WriteSameLogEntry
                                                       |                                                                 |                     
                                                       --> SyncPointLogEntry* sync_point_entry                           |                                                            
                                                                                                                         |                     
                                                                                                                         |                                
                                                                                                                         |                            
                                                                                                                         |                                 
                                                                                                                         |                                                            
                                                                                                                         --> buffer::ptr pmem_bp;
                                                                                                                         --> buffer::list pmem_bl;
                                                                                                                         --> std::atomic<int> bl_refs = {0}; 
                                                                                                                         --> uint8_t *pmem_buffer = nullptr;





======================= rwl's Resource =======================================================

C_WriteRequest
   |
   ---> WriteRequestResource
          |
          | vector
          |
          ---> WriteBufferAllocation  
                  |
                  ---> unsigned int allocation_size = 0;
                  |
                  ---> pobj_action buffer_alloc_action; <----- publish
                  |
                  ---> TOID(uint8_t) buffer_oid = OID_NULL;   <----- ###
                  |
                  ---> bool allocated = false;
                  |
                  ---> utime_t allocation_lat;

=========================================================================

SyncPoint
  |
  |  
  --------> std::shared_ptr<SyncPointLogEntry> log_entry; // ########
  |  
  --------> std::shared_ptr<SyncPoint<T>> earlier_sync_point;
  |    | 
  |    ---> std::shared_ptr<SyncPoint<T>> later_sync_point;
  |  
  --------> uint64_t m_final_op_sequence_num = 0;
  |
  --------> C_Gather *m_prior_log_entries_persisted;
  |    |
  |    ---> int m_prior_log_entries_persisted_result = 0;
  |    |
  |    ---> int m_prior_log_entries_persisted_complete = false;
  |
  |
  --------> C_Gather *m_sync_point_persist;
  |    |
  |    ---> bool m_append_scheduled = false;
  |    |
  |    ---> bool m_appending = false;
  |
  --------> std::vector<Context*> m_on_sync_point_appending;
       |
       ---> std::vector<Context*> m_on_sync_point_persisted;


============================================================================================

WriteLogOperationSet 
  |
  ---> BlockExtent m_extent;
  ---> BlockGuardCell *m_cell;
  |
  ---> Context *m_on_finish;
  ---> bool m_persist_on_flush; 
  |
  ---> C_Gather *m_extent_ops_appending;
  ---> Context *m_on_ops_appending;
  |
  ---> C_Gather *m_extent_ops_persist;
  ---> Context *m_on_ops_persist;
  |
  ---> GenericLogOperationsVector<T> operations;
  ---> utime_t m_dispatch_time;
  |
  ---> std::shared_ptr<SyncPoint<T>> sync_point;



======================= message break down ==================================================

                   bl                              bl1                                   copy
aio_write(bl) -------------> C_BlockIOReuqest ------------> GenericWriteLogOperation ------------> WriteLogEntry.pmem_buffer ---------> rwl.flush_pmem_buffer
                                               |   bl2                                   copy
                                               -----------> GenericWriteLogOperation ------------> WriteLogEntry.pmem_buffer ---------> rwl.flush_pmem_buffer
                                               |   bl3                                   copy
                                               -----------> GenericWriteLogOperation ------------> WriteLogEntry.pmem_buffer ---------> rwl.flush_pmem_buffer  
                                               |   bl4                                   copy
                                               -----------> GenericWriteLogOPeration ------------> WriteLogEntry.pmem_buffer ---------> rwl.flush_pmem_buffer




============================ write flow ========================================

                         ### TODO
                            |
      aio_write      flush_new_sync_point     aio_discard      aio_writesame   aio_compare_and_write
         |                |                        |                 |                 |
         | write_req      | flush_req              | discard_req     | ws_req          | cw_req
         |                |                        |                 |                 |
----------------------------------------------------------------------------------------------------------------                    
|                                                                                                              |
|                                      block_guarded_request                                                   |
|                                                                                                              |
----------------------------------------------------------------------------------------------------------------
                        |
                        v virtual : C_BlockIORequest
                        |
        -----------------
        |
== alloc_and_dispatch_io_req (xxx_req) ==
        |
        |
 m_deffered_ios.empty() ----------------------------------->
   |                                    no                 |
   v yes                                                   v 
   |                                              fails    |
   --> == C_BlockIORequest->alloc_resource() == ---------->|
           |                                               |
           v success                                       |
           |                                               |
           --> == C_BlockIORequest->dispatch ==            |
                            |                              ---> rwl.dispatch_deffered_write(xxx_req)
                            v 
                            | 
-------------------------------------------------------------------------------------------------
       |                          |                         |
  C_WriteRequest            C_FlushRequest          C_DiscardRequest        
       |                          |                         |
--------------------------------------------------------------------------------------------------
       |                          |                         |    
       v                        #####                       TODO
       |                              
--------------------------------------------------------------------------------------------------------------------- C_WriteRequest                                
       |                              
 


====================== note ===============================

         write IO path
               |                    
               |                    
               |                    
   C_writeRequest::dispatch      == aio_flush(on_finish) ==
               |                             |
               |                             ---> flush_req = new C_FlushRequest(on_finish)
               |                             |
               v                             v
               |                 ---------------------------------------------------------- block_guard
               |                             |
               |                             v
               |                             |
               |                       == flush_new_sync_point_if_needed(flush_req, later) ==
               |                                          |
               |                                          v
               v                                          |
               |                         rwl.m_current_sync_point->log_entry->m_writes        
               |                             |                                  |                                                    
               |                             | yes                           no |            
               |                             |                                  | will don't append sync point log          
               |                             |                                  |                                     
               |                             |                                  |
               |                             |               m_current_sync_point->earlier_sync_point
               |                             |                    |                         |
               |                             |                    | no                  yes |
               |                             |                    |                         |
               |                             v          later.add(flush_req)        m_current_sync_point->earlier_sync_point->m_on_sync_point_persisted.push_back(flush_req)
               |                             |                    |                                                            |
               v                             |        user thread v                                                            v which thread
               |                             |                    |                                                            |
               |                             |                    ------>----------------------------------<--------------------
               |                             |                                            | 
               |                             |                                            | 
               |                             |                                 C_FlushRequest::complete
               |                             | 
               -----------------<------------- 
               |
               |
               |
               |
               v                           -----------------------> to_appending->m_prior_log_entries_persisted->activate()
               |                           |
               |                           -----------------------> to_appending->m_sync_point_persist->activate()
               |                           |
               |                           |
      == flush_new_sync_point(flush_req, later)  ==
           |  
           ---> flush_req = make_flush_req()  
           |  
           ---> ##### new_sync_point(later) #####
           |  
           ---> to_append = rwl.m_current_sync_point->earlier_sync_point  
           |  
           ---> flush_req->to_append = to_append 
           |
           ---> to_append->m_on_sync_pont_persisted.push_back(flush_req)
           |  
           ---> lambda entry : to_append->m_sync_point_persist->set_finisher
                                             |
                                             |
----------------------------------------------------------------------------- thread switch                
                                             |
                                             | namely
                                             |
                    == alloc_and_dispatch_io_req(flush_req) ==     
                                    |     |
                                    |     |
           --------------------------     |
           |                              |  
           v                              ----> == flush_req->alloc_resources ==
           |         
      == flush_req->dispatch ==  
           |    
           --> op = new SyncPointLogOperaion ==                            
           |
           --> == rwl.schedule_append(op) == 
                          |
              -------------
              | 
              |
              |                                                                                 
              v                                                                                 
 == rwl.schedule_append(ops) ==  multi-thread                                                   
  |            
  |                                                             
  ---> need_schedule = rwl.m_ops_to_append.emty() !&& rwl.m_appending 
  |            
  |            
  ---> rwl.m_ops_to_append.push_back(ops)
  |                                                                                                    
  ------------------------->--------------------------------------------                                                          
  |                                                                    |                                  
  ---> need_schedule  --------------------                             v                                                  
              |                          |                             |                                                  
              | true                     | false                       |                                                  
              |                          |                             |                                                  
     == enlist_op_appender ==          return                   == op->appending ==                                               
              |                                                     |                                                             
              |                                                     --->  for(auto ctx : op->sync_point->m_on_sync_point_appending)                      
              |                                                                 |                                                  
              |                                                                 --- 1 --> write_request->schedule_append of next sync point                                                 
              |                                                                 |                                                  
              |                                                                 --- 2 --> (next_sync_point->m_prior_log_entries_persisted->stub)->complete()                     
              |                                                                                       
              v                                                                                
 ------------------------------------------------------------- thread switch                          
              |                                                                               
              v                                                                               
              |                                                                               
== one thread : append_scheduled_ops ==                                        
          |
          |
          --> ## 3 ## == alloc_op_log_entries == ####
          |                |
          |                ---> just get log resource, but don't move index of AEP
          |
          |
          --> == append_op_log_entries == 
          |         | 
          |         ---> ## 4 ## *operation->get_log_entry()->pmem_entry = operation->get_log_entry()->ram_entry ####
          |         | 
          |         ---> ## 5 ## == flush_op_log_entries == ######
          |         |               | 
          |         |               --> pmemobj_flush(m_internal->m_log_pool, ops.front()->get_log_entry()->pmem_entry, ops.size() * sizeof(*(ops.front()->get_log_entry()->pmem_entry)))
          |         |                
          |         ---> pmemobj_drain  
          |         |       
          |         ---> transaction        
          |               |
          |               --> ## 6 ##  D_RW(pool_root)->first_free_entry = rwl.m_first_free_entry ##
          |               |
          |               --> pmemobj_tx_publish(&write_op->buffer_alloc->buffer_alloc_action, 1)
          |
          |
          --> == complete_op_log_entries(ops) ==                                    
                   |                                      
                   ---> == for(auto op : ops) ==
                   |             |
                   |             ---> SyncPointLogOperation::complete
                   |                     | 
                   |                     ---> just try : SyncPointLogOperation::appending
                   |                     | 
                   |                     ---> rwl.handle_flushed_sync_point(sync_point->log_entry)
                   |                     | 
                   |                     ---> for( auto ctx : sync_point.m_on_sync_point_persisted ) 
                   |                             | 
                   |                             ---1---> C_FlushRequest
                   |                            
                   ---> wake_up
                         |
                         ---> process_work



===========================================================================================================================

                


invalidate
    |
    |
    |
    |     true
    --------------------   
                       |
                       v
== flush(on_finish, invalidate, discard_unflushed_writes) ==
    |
    |
== internal_flush(on_finish, invalidate, discard_unflushed_writes) ==
        |
        ---> invadate_block_extent = new BlockExtent(whole_volume_extent)
        |
        ---> ctx = new GuardedRequestFunctionContext()                               --------> this is a barrier
        |                                                                            |
        ---> detain_guard_request(new GuardedRequest(invalidate_block_extent, ctx, true))
                                                                               |
                                                                               |
        ------------------------------------------------------------------------
        |
        ----> if(discard_unflushed_writes) ---> m_invalidating = true;
        |
        |
 flush_req = make_flush_req(ctx)
        |                    |
        |                    ---------------------
        |                                        |       
        v                                        |       
        |                                        v               
 flush_new_sync_point_if_needed(flush_req)       |
                                                 |
                                                 |
        ---------------<--------------------------                                         
        | 
        v 
        | 
        ---> sub_context_1 ---> flush_dirty_entries ---------------->-------------->-------------------------
        |                                                                                                   |                                                  
        ---> sub_context_2 ---> invadate                                                                    |                                  
        |                           |                                                                       |                                  
        |                           --> ture                                                                |                          
        |                           |     |                                                                 |                                          
        |                           |     --> retire_entries                                                |                                  
        |                           |     |                                                                 |                                          
        |                           |     --> m_image_writeback->invalidate                                 |                                          
        |                           |                                                                       |                                                  
        |                           --> false                                                               | flush all writes to OSD                         
        |                                 |                                                                 |                          
        |                                 --> m_image_writeback->flush                                      |                                                  
        |                                                                                                   |                  
        |                                                                                                   |                                                                          
        ---> sub_context_3 ---> release_guarded_request                                                     |                                  
        |                                                                                                   |                                          
        ---> on_finish   <---- internal_flush's callback                                                    |                                                          
                                                                                                            |              
                                                                                                            |              
                                                                                                            |              
                                                                                                            |              
                                                                                                            |              
        ------------<-------------------------<--------------------------------------<-----------------------                                                                                                                
        |                                                                                                                                 
== flush_dirty_entries ==   <----------------<---------------------------------------------------------<-----------<---------------------------------          
        |                                                                                                                                           |            
        |                                                                                                                                           |            
        | check                                                                                                                                     |            
        v                                                                                                                                           |                    
--------------------------------------------------------------      data clean                                                                      |    
| m_log_dirty_entries.empty() ||  m_flush_ops_in_flight == 0 | -------------------> flush over                                                      ^    
--------------------------------------------------------------                                                                                      |    
             |                                                                                                                                      |    
             v  data dirty                                                                                                                          |    
             |                                                                                                                                      |    
             ---> m_flush_complete_contexts.push_back(flush_dirty_entries)                                                                          |    
             |                                                                                                                                      |    
             ---> == wake_up ==   <--------------------------------------------------------<--------------------------------------------------      |                                                                                                                                  
                       |                                                                                                                     |      |     
                       | check                                                                                                               |      |     
                       v                                                                                                                     |      |     
               rwl.m_wake_up_scheduled                                                                                                       |      |     
                       |                                                                                                                     |      |     
                       v no                                                                                                                  |      |     
                       |                                                                                                                     |      |     
                       ---> m_work_queue.queue(process_work)                                                                                 |      |     
                                               |                                                                                             |      |             
                                               |                                                                                             |      |             
       -----------------------------------------                                                                                             |      |     
       |                                                                                                                                     |      |     
== process_work ==                                                                                                                           |      |     
   |                                                                                                                                         ^      ^             
   ---> == retire_entries ==                                                                                                                 |      |     
   |        |                                                                                                                                |      |
   |        ---> == can_retire_entry ==                                                                                                      |      |     
   |        |       |                                                                                                                        |      | 
   |        |       --> if current entry still don't be completed, it can't be retired                                                       |      |     
   |        |       |                                                                                                                        |      |     
   |        |       --> if current entry still don't be flushed, it can't be retired.                                                        |      | 
   |        |       |                                                                                                                        |      |     
   |        |       --> if current entry still be readed by other thread, it can't be retired.                                               |      | 
   |        |                                                                                                                                |      | 
   |        |                                                                                                                                |      |             
   |        ---> when current entry can be retired                                                                                           |      | 
   |                |                                                                                                                        |      |     
   |                ---> action 1 : just try modify  : D_RW(pool_root)->flushed_sync_point = m_flushed_sync_point                            |      | 
   |                |                                                                                                                        |      |     
   |                ---> action 2 : must need modify : D_RW(pool_root)->first_valid_entry = xxxxx                                            |      |
   |                |                                                                                                                        |      |     
   |                ---> action 3 : free AEP space   : TX_FREE(entry->ram_entry->write_data)                                                 |      |     
   |                                                                                                                                         |      | 
   |                                                                                                                                         |      |     
   |                                                                                                                                         |      |
   --> == dispatch_deffered_writes ==                                                                                                        |      |      
   |                                                                                                                                         |      |     
   --> == process_writeback_dirty_entries ==                                                                                                 |      |     
         |                                                                                                                                   |      |     
         ---> == can_flush_entry ==                                                                                                          |      |                                     
         |         |                                                                                                                         |      |     
         |         ---> if m_invalidating is true, it can be flushed                                                                         |      |             
         |         |                                                                                                                         |      |     
         |         ---> if current entry is completed and current in-flight flush is reasonable, it can be flushed.                          |      |     
         |                                                                                                                                   |      |                             
         v                                                                                                                                   |      |                     
         ---> == construct_flush_entry_ctx() ==                                                                                              |      |             
         |         |                                                                                                                         |      |                    
         v         ---> m_image_writeback->aio_write     ---> m_image_writeback->aio_flush --->  sync_point_write_flushed ---> wakeup --------      |                     
         |         |                                                                                                                         |      |                    
         |         ---> m_image_writeback->aio_writesame ---> m_image_writeback->aio_flush --->  sync_point_write_flushed ---> wakeup --------      |                    
         v         |                                                                                                                         |      |                     
         |         ---> m_image_writeback->aio_discard   ---> m_image_writeback->aio_flush --->  sync_point_write_flushed ---> wakeup --------      |                    
         |                                                                                                      |                                   |                    
         ---> == execute above context ====                                                                     |                                   |                            
         |                                                                                                      |                                   |                    
         |                                                                                                      |                                   |                            
         ---> == finish_contexts(rwl.m_flush_complete_contexts) ==                                              |                                   |                            
                    |                                                                                           v                                   |               
                    ---> flush_dirty_entries  ------------------------------------------------------------------------------------------------------- 
                                                                                                                | 
                                                                                                                | 
                                                                                                                | 
                                                                                                                | 
                                                                                                                v 
                                                                                                        == sync_point_write_flushed == 
                                                                                                                |
                                                                                                        == handle_flushed_sync_point ==  <---------
                                                                                                           |                                      | 
                                                                                                           |                                      | yes
                                                                                                           |                                      | 
                                                                                                           --> if_have_next_sync_point ------>-----
                                                                                                                     |                    
                                                                                                                     | no
                                                                                                                     v 
                                                                                                           == persist_last_flushed_sync_gen ==
                                                                                                                | 
                                                                                                                | transaction 
                                                                                                                | 
                                                                                                                -->  D_RW(pool_root)->flushed_sync_gen = m_flushed_sync_gen;
                                                                                                        



====================================================================================

 init 
  |
  --> m_image_writeback->init
  | 
  --> rwl_init
         |
  --------
  | 
rwl_init
  |
  --> no pool fille 
  |     |
  |     --> transactionly alloc persistent space.
  |
  --> pool file exist
  |     |
  |     --> reload metadata from pmem, then store these metadata to RWL. 
  |     |
  |     --> load_existing_entries
  |
  |
  --> init_flush_new_sync_point
           | 
           --> new_sync_point --> TODO
           | 
           --> flush_new_sync_point



======================================

WriteRequestResources
  |
  | vector
  |
  ----> WriteBufferAllocation
          |
          ----> TOID(uint8_t) buffer_oid
          |
          ----> bool allocated
          |
          ----> pobj_action buffer_alloc_action 
          |
          ----> unsigned int allocation_size

========================================================================

0 : reverser resource including log space and buffer space

1 : copy data from mem to AEP at one operation ---> dispatch function
2 : flush data buffer of AEP at one opearation ---> flush_pmem_buffer

3 : alloc log entry of AEP to every operation
4 : write log entry from mem to AEP 
5 : flush AEP for log entry

6 : modify pool root


   C_WriteRequest::dispatch
              |
              v
              | 
        --------------       
              | 
              v 
              | 
  C_WriteRequest::schedule_append
              |
              v 
              |
       m_do_early_flush <---------determined by C_WriteRequest::dispatch
              |
              |            false 
              ---------->------------------------
              |                                 |
              |                                 v 
              |                                 |
              v                   == rwl.schedule_flush_and_append ==
         true |                                 |
              |                                 -----> namely: put ops into rwl.m_ops_to_flush
              |                                 |
              |                                 v 
              |                         == enlist_op_flusher == <---------------
              |                                 |                              |
              |                                 |                              |
              |                            ------------- Finisher / WQ         |
              |                                 |                              |
              |                                 v                              |
              |                  == flush_then_append_scheduled_ops == -------->
              |                                 |       |                2 
              |                               1 |       | 3
              |                                 |       | 
              |                                 v       ------------------->--------------
              |                                 |                                        |       
              |<-----------------<---------------                                        v                       
              |                                                                          |       
              |                                                                          |       
              | get fixed number ops from m_ops_to_flush                                 |       
              v                                                                          |       
              |                                                                          |       
## 2 ### == flush_pmem_buffer(ops) == ####   multi-thread                                |               
              |                                                                          |       
              |                                                                          |       
              |                                                                          |       
              |                                                                          |       
              |                                                                          |       
              v                                                                          |       
 == rwl.schedule_append(ops) ==  multi-thread                                            |       
              |     |                                                                    |               
              |     ------->------------------                                           |               
              |                              | 2  multi-thread                           |       
              |                              v                                           |       
        rwl.m_appending                      |                                           |       
              |                              |                                           |       
              | true                         |                                           |       
              |                              |                                           |       
     == enlist_op_appender ==        == op->appending ==                                 |               
              |                           |                                              v               
              |                           --> finished op_set appending stub             |               
              |                                                                          |               
              |                                                                          |               
              | put ops to m_ops_to_append                                               |               
              |                                                                          v               
              |                                                                          |               
              v                                                                          |       
------------------------------------------------------------- thread switch              |               
              |                                                                          |       
              v                                                                          |       
              |                                                                          |       
== one thread : append_scheduled_ops ==   <--------<--------------------------------------                                                                  
          |
          |
          ---> ## 3 ## == alloc_op_log_entries == ####
          |                |
          |                ---> just get log resource, but don't move index of AEP
          |
          |
          ---> == append_op_log_entries == 
          |         | 
          |         ---> ## 4 ## *operation->get_log_entry()->pmem_entry = operation->get_log_entry()->ram_entry ####
          |         | 
          |         ---> ## 5 ## == flush_op_log_entries == ######
          |         |               | 
          |         |               --> pmemobj_flush(m_internal->m_log_pool, ops.front()->get_log_entry()->pmem_entry, ops.size() * sizeof(*(ops.front()->get_log_entry()->pmem_entry)))
          |         |                
          |         ---> pmemobj_drain  
          |         |       
          |         ---> transaction        
          |               |
          |               --> ## 6 ##  D_RW(pool_root)->first_free_entry = rwl.m_first_free_entry ##
          |               |
          |               --> pmemobj_tx_publish(&write_op->buffer_alloc->buffer_alloc_action, 1)
          |
          |
          ---> == complete_op_log_entries ==                                    
                        |                                      
                        v                                      
                        |                                      
              -----------                                      
              |                                     
              v                                      
== GenericLogOperation->complete(ops) ==
     |
     |               
     |               
     ---> for(auto op : ops)
     |       | 
     |       ---> rwl.m_dirty_entries.push_back(op->log_entry())
     |       |
     |       ---> op->complete()
     |               |
     |               |
     |               ---> just try appending
     |               |       |
     |               |       |    on_write_append = WriteLogOperationSet.m_extents_ops_appending->new_sub()
     |               |       |               |
     |               |       ---> on_write_append->complete() -----------------------------------------------------------------------
     |               |                                                                                                              |
     |               ---> complete                                                                                                  |
     |                       |                                                                                                      |
     |                       |   on_write_persist = WriteLogOperationSet.m_extents_ops_persisit->new_sub()                          |
     |                       |              |                                                                                       |
     |                       ---> on_write_persist->complete()                                                                      |
     |                                |                                                                                             |
     |                                |                                                                                             |
     ---> wake_up                     |                                                                                             |
                                      |                                                                                             |
                                      |                     -------------------------------------------------------------------------
                                      |                     |         
                                      v                     v         
                                      |                     |
                      ------------------------------------------------------- if the last stub is completed, execute its finisher entry.
                                      |                     |
                                      v                     v 
                    ----------------------------------------------------------                    
                    |                          |                             |
                    | m_extent_ops_appending   |     m_extent_ops_persisted  | <----------- C_WriteRequest::m_op_set
                    |                          |                             |
                    ----------------------------------------------------------                       
                             |                     |           |
                             |                     ^           |
                             |                     |           |
                             ---------->------------           |
                             |     release stub                |
                             |                                 |
                             |                                 |
                             |                                 ---------------------------------
                             |                                                                 |
                             |                                                                 |
 release stub of C_WriteRequest::SyncPoint::m_prior_log_entries_persisted                      v
                                                                                               |
                                                                                               |
                                                                                               |
                                                                                               v 
                                                                                               |
                                                                                    C_WriteRequest::complete 
                                                                                               |
                                                        





================= block guarded IO flow ===============================================

                         rwl_internface 
                               |
                               v 
                        C_xxxxxx_Request
                         /            \
                        /              \
                  BlockExtent     GuardedRequestFunctionContext    aio_flush or internal_flush
                       |                    |                                |
                       v                    v                                v true
                       |                    |                                |
                       -------------------------------------------------------
                                 |             |          |
                                 v             v          v
              GuardedRequest(block_extent, guard_ctx, is_barrier)
                               |        
                               v    
                               |        
rwl.detain_guarded_request(guard_request)
    |
    ---> cell = detain_guarded_request_barrier_helper
    |                      |
    |                      v 
    |                      |                       true
    |            rwl.m_barrier_in_progress  -------------------> guard_request->guard_ctx->m_state.queued = true
    |                      |                               |
    |                false v                               ----> rwl.m_awaiting_barrier.push_back(guard_request)
    |                      |                               |
    |                      |                               ----> cell = nullptr
    |                      |
    |                      |
    |                      |                              true
    |      guard_request->guard_ctx->m_state.barrier ------------->  rwl.m_barrier_in_progress = true
    |                      |                                                       | 
    |                false v                                                       v
    |                      |                                         guard_request->guard_ctx->m_state.current_barrier = true              
    |                      |                                                       | 
    |                      ------------<-----------------------<--------------------                                                       
    |                      |
    |                      v
    |       cell = detain_guarded_request_helper  ----> rwl.m_write_log_guard.detain(guard_request->block_extent, block_request, &cell)         
    |                      |                      
    |                      v                     
    |           rwl.m_barrier_cell = cell    
    |
    |
    ---> if(cell) 
           |
           ----> guard_request->guard_ctx->m_cell = cell
           |
           ----> guard_request->guard_ctx->complete(0)






rwl.internal_flush    rwl.aio_flush       GuardedBlockIORequest::release_cell
   |                      |                             |
   v                      v                             v
   |                      |                             |
   ------------------------------------------------------  
                          |
                          v
            rwl.release_guarded_request









==========================================================================

Extent
   |
   ----> typedef std::pair<uint64_t, uint64_t> Extent

Extents
   |
   ----> typedef vector<Extent> Extents

  Extent
    |
    | child
    |
ImageExtentBuf
  | 
  ---> bufferlist m_bl;


typedef vector<ImageExtentBuf> ImageExtentBufs


====

ExtentsSummary
    |
    ----> uint64_t total_bytes
    |
    ----> uint64_t first_image_byte
    |
    ----> uint64_t last_image_byte


GuardedRequest
   |
   ----> BlockExtent block_extent
   |
   ----> GuardedrequestFunctionContext* guarded_ctx.  
            |
            ---> BlockGuardCell
            |
            ---> m_callback ---> namely : lambda function
            |
            ---> BlockGuardReqState
                    |
                    ---> barrier
                    |
                    ---> current_barrier
                    |
                    ---> detained
                    |
                    ---> queued


librbd::BlockGuard<GuardedReqest> WriteLogGuard
        |
        v namely
        |
 rwl.m_write_log_guard
                |
                ----> release : rwl.release_guarded_request
                |
                ----> detain  : rwl.detain_guarded_request_helper










=====


BlockExtent
  |
  ----> uint64_t block_start
  |
  ----> uint64_t block_end


struct BlockGuardCell {}


==== just type relationship ====

BlockGuard<BlockOperation>
   |
   ----> DetainedBlockExtent
   |
   ----> DetainedBlockExtentKey
   | 
   ----> DetainedBlockExtentCompare
   |
   ----> DetainedBlockExtentsPool
   |
   ----> DetainedBlockExtents
   |
   ----> BlockExtentToDetainedBlockExtents

 

boost::intrusive::list_base_hook<>      boost::intrusive::set_base_hook<>
                       \                    /
                        \                  /
                         \                /
                         DetainedBlockExtent
                             |
                             ---> BlockExtent block_extent
                             |
                             ---> BlockOperations block_operations
                                     |
                                     ----> typedef std::list<BlockOperation> BlockOperations







================================ pmdk internface which be used by rwl =============================





=================================== transaction for rwl =======================================



== rwl.init ==

   - TX_BEGIN(m_internal->m_log_pool)
   - {
   -   TX_ADD(pool_root);
   -
   -   D_RW(pool_root)->header.layout_version = RWL_POOL_VERSION;
   -
   -   D_RW(pool_root)->log_entries = TX_ZALLOC(struct WriteLogPmemEntry,
   -                                            sizeof(struct WriteLogPmemEntry) * num_small_writes);
   -   D_RW(pool_root)->num_log_entries = num_small_writes;
   -
   -   D_RW(pool_root)->first_free_entry = m_first_free_entry;
   -   D_RW(pool_root)->first_valid_entry = m_first_valid_entry;
   -   D_RW(pool_root)->flushed_sync_gen = m_flushed_sync_gen;
   -
   -   D_RW(pool_root)->pool_size = m_log_pool_actual_size;
   -   D_RW(pool_root)->block_size = MIN_WRITE_ALLOC_SIZE;
   -
   - }


== rwl.persist_last_flushed_sync_gen ==
 
   - if (D_RO(pool_root)->flushed_sync_gen < flushed_sync_gen) {
   -
   -    TX_BEGIN(m_internal->m_log_pool) {
   -      D_RW(pool_root)->flushed_sync_gen = flushed_sync_gen;
   -    }
   - }
 


== rwl.retire_entries ==

   -   TX_BEGIN(m_internal->m_log_pool) // retire_entries
   -   {
   -     if (D_RO(pool_root)->flushed_sync_gen < flushed_sync_gen)
   -     {
   -       D_RW(pool_root)->flushed_sync_gen = flushed_sync_gen;
   -     }
   -
   -     D_RW(pool_root)->first_valid_entry = first_valid_entry; 
   -
   -     for (auto &entry: retiring_entries) {
   -       if (entry->is_write() || entry->is_writesame()) {
   -         TX_FREE(entry->ram_entry.write_data);
   -       }
   -     }
   -   }


== rwl.append_op_log_entries ==

   -   TX_BEGIN(m_internal->m_log_pool)
   -   {
   -     D_RW(pool_root)->first_free_entry = m_first_free_entry;
   - 
   -     for (auto &operation : ops)
   -     {
   -       if (operation->is_write() || operation->is_writesame())
   -       {
   -         auto write_op = (std::shared_ptr<WriteLogOperationT>&) operation;
   - 
   -         pmemobj_tx_publish(&write_op->buffer_alloc->buffer_alloc_action, 1);
   - 
   -       } 
   -     }
   -   }
   - 


============================= request complete flow ===========================================






    C_xxxxRequest::complete 
           |
           v
           |
    C_BlockIORequest::finish
           |
           v
           |
           ----> C_BlockIORequest::complete_uesr_request ----> user_interface::complete
           |
           |
           ----------> C_WriteRequest::finish_req
                | 
                ----> C_FlushRequest::finish_req
                |
                ----> C_DiscardRequest::finish_req












